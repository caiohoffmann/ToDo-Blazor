@inject IJSRuntime JSRuntime
@if (show) { 
    <ul @onmouseout="Hide" @onmouseover="Show">
        <li class="brush-option" data-color="#546e7a" @onclick="ChangeColor"><a class="btn-floating blue"><i class="material-icons">brush</i></a></li>
        <li class="user-option"><a class="btn-floating yellow darken-1"><i class="material-icons">account_box</i></a></li>
        <li class="remove-block"><a class="btn-floating red darken-1" @onclick="RemoveBlock"><i class="material-icons">clear</i></a></li>
        <li class="color-picker"><input type="color" @ref="brush" style="position:absolute; left:-9999px; top:-9999px;" value="color" @onchange="ChangedColor" /></li>
    </ul>
}
@code {
    [Parameter]
    public string color { get; set; }
    [Parameter]
    public int idTaskBlock { get; set; }
    private ElementReference brush;
    private bool show;
    public void Show()
    {
        show = true;
        StateHasChanged();
    }
    public void Hide()
    {
        show = false;
        StateHasChanged();
    }
    private async void ChangeColor()
    {
        await JSRuntime.InvokeAsync<object>("pickColor",brush);
    }
    [Parameter]
    public EventCallback<string> ColorChanged { get; set; }

    private Task ChangedColor(ChangeEventArgs e)
    {
        color = e.Value.ToString();

        return ColorChanged.InvokeAsync(color);
    }

    [Parameter]
    public EventCallback<int> RemoveCall { get; set; }

    private async Task RemoveBlock()
    {
        await RemoveCall.InvokeAsync(idTaskBlock);
    }
}
